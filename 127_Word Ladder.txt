class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        set<string> s;
        queue<string> q;
        int count = 1;
        
        for(int i=0;i<wordList.size();i++) {
            s.insert(wordList[i]);
        }
        
        if(s.find(endWord) == s.end()) {
            return 0;
        }
        
        q.push(beginWord);
        
        while(!q.empty()) {
            int size = q.size();
            for(int i=0;i<size;i++) {
                string temp = q.front();
                q.pop();
                vector<string> str = gen(temp, s);
                for(int k=0;k<str.size();k++) {
                    if(str[k] == endWord) {
                        return ++count;
                    }
                    q.push(str[k]);
                }
            }
            count++;
        }
        
        return 0;
    }
    
    vector<string> gen(string temp, set<string>& s) {
        vector<string> ans;
        
        for(int i=0;i<temp.length();i++) {
            char t = temp[i];
            for(int j=0;j<=26;j++) {
                temp[i] = 'a' + j;
                auto pos = s.find(temp);
                if(pos != s.end()) {
                    ans.push_back(temp);
                    s.erase(pos);
                }
            }
            temp[i] = t;
        }
        
        return ans;
    }
};
